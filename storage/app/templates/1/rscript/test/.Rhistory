# Initialize
Inflow_hydro <-c()
for(i in 1:length(location)){
if (location[i]==1){
n = i+2
Inflow_hydro = cbind(Inflow_hydro,Inflow_matrix[,n])
hydro_names = append(hydro_names,names[i])
}
if (location[i]== 2|location[i]==3){
m = i+2
Inflow_wind= cbind(Inflow_wind,Inflow_matrix[,m])
wind_names = append(hydro_names,names[i])
}
}
hydro_names
wind_names
Inflow_hydro <-c()
Inflow_wind <- c()
hydro_names <-c('Stage','Scenario')
wind_names <-c('Stage','Scenario')
# Initialize
Inflow_hydro <-c()
for(i in 1:length(location)){
if (location[i]==1){
n = i+2
Inflow_hydro = cbind(Inflow_hydro,Inflow_matrix[,n])
hydro_names = append(hydro_names,names[i])
}
if (location[i]== 2|location[i]==3){
m = i+2
Inflow_wind= cbind(Inflow_wind,Inflow_matrix[,m])
wind_names = append(wind_names,names[i])
}
}
wind_names
Output=list()
Output[[1]]=Inflow
Output[[2]]=InflowWind
Output[[3]]=Inflow_matrix
# Install tools and libraries
graphics.off()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
# set wd
setwd(".") #first open VAR_main
#setwd("../../test/")
ffolder = '../main/funciones/'
source(paste(ffolder,'Data_import_1.R',sep=''))
source(paste(ffolder,'model_setup.R',sep=''))
source(paste(ffolder,'synthetic_generation.R',sep=''))
######################## Stage 1. Data load ####################################
# define folder
datafolder = '../main/series_hidricas_sistema_completo'
# define file
#info_series ='info_var_25.csv' # 13 plantas - problema con p=12
#info_series ='info_var_base.csv' # 8 plantas - problema con p=12
#info_series ='info_var_100.csv' # 27 plantas - problema con p=12
#info_series ='info_var_auct.csv' # evaluaciÃ³n de subastas
info_series ='info_var_base.csv' # p=[3-5]
# dala load and assessmet
main_data_file <- Data_import_1(datafolder,info_series,ffolder)
# Output Data_import_1
# return(list(m_series,dates,monts_data,m_dates,dataN,info_name,namesS,FP,resource_type,inst_cap))
######################## Stage 2. Model setup #################################
m_series <- main_data_file[[1]]
m_dates <- main_data_file[[4]]
info_codes  <- main_data_file[[6]]
names <- main_data_file[[7]]
#if testing_t <- 1, it uses 80% of the provided period to train the model and the remaining 20% to test it
lag_max =12
testing_t <- 0
d_correl <- 0
seasonality <- 12 #NULL
SETUP_model <- model_setup(m_series,m_dates,info_codes,testing_t,lag_max,seasonality,names,ffolder)
# Output model_setup
# return(list(best_p_acfres,best_p_pacfres, p_model,VARts_series[[p_model]]))
print(SETUP_model[[3]])
######################## Stage 3. forecast #################################
forecast_periods <- 3 #(test time, stablished by user 1 to 20 years)
scenarios <- 5
prueba=synthetic_simulaton(m_series, names, SETUP_model[[4]],scenarios,forecast_periods,main_data_file[[5]][[2]])
prueba
source('C:/Users/ab.pedraza1391/SharePoint/AP_documentos - Documentos/Compilacion VAR/Bitbuket_carpeta_compartida_JFP/seriescomplementariedad/test/VAR_main.R')
prueba
source('C:/Users/ab.pedraza1391/SharePoint/AP_documentos - Documentos/Compilacion VAR/Bitbuket_carpeta_compartida_JFP/seriescomplementariedad/test/VAR_main.R')
Inflow_wind
#::::::::::::::::::::::::::::::::::::::::::::::::: Section 1
# forecast using forecas tool from Package 'forecast' https://cran.r-project.org/web/packages/forecast/forecast.pdf
# forecast input 1 : VAR model for slected p -> SETUP_model[[4]] #info_model = SETUP_model[[4]]
# forecast input 2 : forecasted periods
VARp_forecast <- forecast(info_model,h=(forecast_periods*12))
# Extract as matrix forecasted values only for the selected value of p
for(i in 1:1){
forecast_mean <- VARp_forecast$forecast[[i]]$mean
for(j in 2:length(VARp_forecast$forecast)){
forecast_mean <-cbind(forecast_mean,VARp_forecast$forecast[[j]]$mean)
}
}
colnames(forecast_mean) <-names
# Assess model regard historic datasets
for(i in 1:ncol(forecast_mean)){
aux<-c()
aux <- forecast_mean[,i] < (min(m_series[,i])*.9)
aux <-which(aux,TRUE)
if(length(aux)>=1){
for(j in 1:length(aux))
qtl<- abs(rnorm(1,0,0.01))
aux1 <- quantile(m_series[,i],qtl)
forecast_mean[,i][aux[j]]<-aux1
}
}
#::::::::::::::::::::::::::::::::::::::::::::::::: Section 2
# Synthetic generation of scenrios around best estimator generated (forecast_mean)
# setA, original data (m_series)
# setB, forecastes data (forecast_mean)
# scenarios, numer of series to be simulated
# Variable initialization
ROWS <-nrow(forecast_mean)
COLUMNS <-ncol(forecast_mean)
DesvEST <- matrix(0,nrow = 1,ncol = COLUMNS)
# Standar deviation original dataset
for(i in 1:COLUMNS){
DesvEST[i]<-sd(m_series[,i])
}
# Synthetic generation throuhg normally distributed error additon
synthetic_data <-list()
for(i in 1:scenarios){
aux <-matrix(0, ncol = COLUMNS,nrow = ROWS)
for(j in 1:COLUMNS){
k=1
while(k<ROWS+1){
random <- rnorm(1,mean = 0,sd = 1)
aux[k,j] <-forecast_mean[k,j]+DesvEST[j]*random
if(aux[k,j]>0){
k=k+1
}
}
synthetic_data[[i]]<-aux
}
}
#::::::::::::::::::::::::::::::::::::::::::::::::: Section 3
# Output matrix generator
# 1. Inflow
Inflow_matrix = matrix(0,nrow = (12*forecast_periods*scenarios),ncol = (length(names)+2))
aux =1
for(i in 1:(12*forecast_periods)){
for(j in 1:length(synthetic_data)){
Inflow_matrix[aux,1]=i
Inflow_matrix[aux,2]=j
Inflow_matrix[aux,3:ncol(Inflow_matrix)]=synthetic_data[[j]][i,]
aux=aux+1
}
}
Inflow_names <- c('Stage','Scenario')
Inflow_names <- append( Inflow_names,names)
colnames(Inflow_matrix)<-Inflow_names
# 2. Spread apart forecasted scenarios between Hydro and RE sources
Inflow_hydro <-c()
Inflow_wind <- c()
hydro_names <-c('Stage','Scenario')
wind_names <-c('Stage','Scenario')
# Initialize
Inflow_hydro <-c()
for(i in 1:length(location)){
if (location[i]==1){
n = i+2
Inflow_hydro = cbind(Inflow_hydro,Inflow_matrix[,n])
hydro_names = append(hydro_names,names[i])
}
if (location[i]== 2|location[i]==3){
m = i+2
Inflow_wind= cbind(Inflow_wind,Inflow_matrix[,m])
wind_names = append(wind_names,names[i])
}
}
colnames(Inflow_hydro)<-hydro_names
colnames(Inflow_wind)<-wind_names
#::::::::::::::::::::::::::::::::::::::::::::::::: Section 1
# forecast using forecas tool from Package 'forecast' https://cran.r-project.org/web/packages/forecast/forecast.pdf
# forecast input 1 : VAR model for slected p -> SETUP_model[[4]] #info_model = SETUP_model[[4]]
# forecast input 2 : forecasted periods
VARp_forecast <- forecast(info_model,h=(forecast_periods*12))
# Extract as matrix forecasted values only for the selected value of p
for(i in 1:1){
forecast_mean <- VARp_forecast$forecast[[i]]$mean
for(j in 2:length(VARp_forecast$forecast)){
forecast_mean <-cbind(forecast_mean,VARp_forecast$forecast[[j]]$mean)
}
}
colnames(forecast_mean) <-names
# Assess model regard historic datasets
for(i in 1:ncol(forecast_mean)){
aux<-c()
aux <- forecast_mean[,i] < (min(m_series[,i])*.9)
aux <-which(aux,TRUE)
if(length(aux)>=1){
for(j in 1:length(aux))
qtl<- abs(rnorm(1,0,0.01))
aux1 <- quantile(m_series[,i],qtl)
forecast_mean[,i][aux[j]]<-aux1
}
}
#::::::::::::::::::::::::::::::::::::::::::::::::: Section 2
# Synthetic generation of scenrios around best estimator generated (forecast_mean)
# setA, original data (m_series)
# setB, forecastes data (forecast_mean)
# scenarios, numer of series to be simulated
# Variable initialization
ROWS <-nrow(forecast_mean)
COLUMNS <-ncol(forecast_mean)
DesvEST <- matrix(0,nrow = 1,ncol = COLUMNS)
# Standar deviation original dataset
for(i in 1:COLUMNS){
DesvEST[i]<-sd(m_series[,i])
}
# Synthetic generation throuhg normally distributed error additon
synthetic_data <-list()
for(i in 1:scenarios){
aux <-matrix(0, ncol = COLUMNS,nrow = ROWS)
for(j in 1:COLUMNS){
k=1
while(k<ROWS+1){
random <- rnorm(1,mean = 0,sd = 1)
aux[k,j] <-forecast_mean[k,j]+DesvEST[j]*random
if(aux[k,j]>0){
k=k+1
}
}
synthetic_data[[i]]<-aux
}
}
#::::::::::::::::::::::::::::::::::::::::::::::::: Section 3
# Output matrix generator
# 1. Inflow
Inflow_matrix = matrix(0,nrow = (12*forecast_periods*scenarios),ncol = (length(names)+2))
aux =1
for(i in 1:(12*forecast_periods)){
for(j in 1:length(synthetic_data)){
Inflow_matrix[aux,1]=i
Inflow_matrix[aux,2]=j
Inflow_matrix[aux,3:ncol(Inflow_matrix)]=synthetic_data[[j]][i,]
aux=aux+1
}
}
Inflow_names <- c('Stage','Scenario')
Inflow_names <- append( Inflow_names,names)
colnames(Inflow_matrix)<-Inflow_names
# 2. Spread apart forecasted scenarios between Hydro and RE sources
location = main_data_file[[5]][[2]]
Inflow_hydro <-c()
Inflow_wind <- c()
hydro_names <-c('Stage','Scenario')
wind_names <-c('Stage','Scenario')
# Initialize
Inflow_hydro <-c()
for(i in 1:length(location)){
if (location[i]==1){
n = i+2
Inflow_hydro = cbind(Inflow_hydro,Inflow_matrix[,n])
hydro_names = append(hydro_names,names[i])
}
if (location[i]== 2|location[i]==3){
m = i+2
Inflow_wind= cbind(Inflow_wind,Inflow_matrix[,m])
wind_names = append(wind_names,names[i])
}
}
colnames(Inflow_hydro)<-hydro_names
colnames(Inflow_wind)<-wind_names
Inflow_hydro
for(i in 1:length(location)){
if (location[i]==1){
n = i+2
Inflow_hydro = cbind(Inflow_hydro,Inflow_matrix[,n])
hydro_names = append(hydro_names,names[i])
}
if (location[i]== 2|location[i]==3){
m = i+2
Inflow_wind= cbind(Inflow_wind,Inflow_matrix[,m])
wind_names = append(wind_names,names[i])
}
}
Inflow_wind
Inflow_hydro <-Inflow_matrix[1:2,]
Inflow_hydro
Inflow_hydro <-Inflow_matrix[,1:2]
Inflow_hydro
# Install tools and libraries
graphics.off()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
# set wd
setwd(".") #first open VAR_main
#setwd("../../test/")
ffolder = '../main/funciones/'
source(paste(ffolder,'Data_import_1.R',sep=''))
source(paste(ffolder,'model_setup.R',sep=''))
source(paste(ffolder,'synthetic_generation.R',sep=''))
######################## Stage 1. Data load ####################################
# define folder
datafolder = '../main/series_hidricas_sistema_completo'
# define file
#info_series ='info_var_25.csv' # 13 plantas - problema con p=12
#info_series ='info_var_base.csv' # 8 plantas - problema con p=12
#info_series ='info_var_100.csv' # 27 plantas - problema con p=12
#info_series ='info_var_auct.csv' # evaluaciÃ³n de subastas
info_series ='info_var_base.csv' # p=[3-5]
# dala load and assessmet
main_data_file <- Data_import_1(datafolder,info_series,ffolder)
# Output Data_import_1
# return(list(m_series,dates,monts_data,m_dates,dataN,info_name,namesS,FP,resource_type,inst_cap))
######################## Stage 2. Model setup #################################
m_series <- main_data_file[[1]]
m_dates <- main_data_file[[4]]
info_codes  <- main_data_file[[6]]
names <- main_data_file[[7]]
#if testing_t <- 1, it uses 80% of the provided period to train the model and the remaining 20% to test it
lag_max =12
testing_t <- 0
d_correl <- 0
seasonality <- 12 #NULL
SETUP_model <- model_setup(m_series,m_dates,info_codes,testing_t,lag_max,seasonality,names,ffolder)
# Output model_setup
# return(list(best_p_acfres,best_p_pacfres, p_model,VARts_series[[p_model]]))
######################## Stage 3. forecast #################################
forecast_periods <- 3 #(test time, stablished by user 1 to 20 years)
scenarios <- 5
prueba=synthetic_simulaton(m_series, names, SETUP_model[[4]],scenarios,forecast_periods,main_data_file[[5]][[2]])
VARp_forecast <- forecast(info_model,h=(forecast_periods*12))
for(i in 1:1){
forecast_mean <- VARp_forecast$forecast[[i]]$mean
for(j in 2:length(VARp_forecast$forecast)){
forecast_mean <-cbind(forecast_mean,VARp_forecast$forecast[[j]]$mean)
}
}
info_model
info_model =SETUP_model[[4]]
VARp_forecast <- forecast(info_model,h=(forecast_periods*12))
for(i in 1:1){
forecast_mean <- VARp_forecast$forecast[[i]]$mean
for(j in 2:length(VARp_forecast$forecast)){
forecast_mean <-cbind(forecast_mean,VARp_forecast$forecast[[j]]$mean)
}
}
colnames(forecast_mean) <-names
for(i in 1:ncol(forecast_mean)){
aux<-c()
aux <- forecast_mean[,i] < (min(m_series[,i])*.9)
aux <-which(aux,TRUE)
if(length(aux)>=1){
for(j in 1:length(aux))
qtl<- abs(rnorm(1,0,0.01))
aux1 <- quantile(m_series[,i],qtl)
forecast_mean[,i][aux[j]]<-aux1
}
}
ROWS <-nrow(forecast_mean)
COLUMNS <-ncol(forecast_mean)
DesvEST <- matrix(0,nrow = 1,ncol = COLUMNS)
for(i in 1:COLUMNS){
DesvEST[i]<-sd(m_series[,i])
}
synthetic_data <-list()
for(i in 1:scenarios){
aux <-matrix(0, ncol = COLUMNS,nrow = ROWS)
for(j in 1:COLUMNS){
k=1
while(k<ROWS+1){
random <- rnorm(1,mean = 0,sd = 1)
aux[k,j] <-forecast_mean[k,j]+DesvEST[j]*random
if(aux[k,j]>0){
k=k+1
}
}
synthetic_data[[i]]<-aux
}
}
Inflow_matrix = matrix(0,nrow = (12*forecast_periods*scenarios),ncol = (length(names)+2))
aux =1
for(i in 1:(12*forecast_periods)){
for(j in 1:length(synthetic_data)){
Inflow_matrix[aux,1]=i
Inflow_matrix[aux,2]=j
Inflow_matrix[aux,3:ncol(Inflow_matrix)]=synthetic_data[[j]][i,]
aux=aux+1
}
}
Inflow_names <- c('Stage','Scenario')
Inflow_names <- append( Inflow_names,names)
colnames(Inflow_matrix)<-Inflow_names
location = main_data_file[[5]][[2]]
Inflow_hydro <-Inflow_matrix[,1:2]
Inflow_wind <-Inflow_matrix[,1:2]
hydro_names <-c('Stage','Scenario')
wind_names <-c('Stage','Scenario')
Inflow_hydro <-c()
for(i in 1:length(location)){
if (location[i]==1){
n = i+2
Inflow_hydro = cbind(Inflow_hydro,Inflow_matrix[,n])
hydro_names = append(hydro_names,names[i])
}
if (location[i]== 2|location[i]==3){
m = i+2
Inflow_wind= cbind(Inflow_wind,Inflow_matrix[,m])
wind_names = append(wind_names,names[i])
}
}
colnames(Inflow_hydro)<-hydro_names
colnames(Inflow_wind)<-wind_names
colnames(Inflow_hydro)<-hydro_names
Inflow_hydro
Inflow_wind
Inflow_hydro <-Inflow_matrix[,1:2]
Inflow_wind <-Inflow_matrix[,1:2]
Inflow_hydro
Inflow_wind
Inflow_hydro <-c()
# Initialize
Inflow_hydro <-Inflow_matrix[,1:2]
Inflow_wind <-Inflow_matrix[,1:2]
hydro_names <-c('Stage','Scenario')
wind_names <-c('Stage','Scenario')
for(i in 1:length(location)){
if (location[i]==1){
n = i+2
Inflow_hydro = cbind(Inflow_hydro,Inflow_matrix[,n])
hydro_names = append(hydro_names,names[i])
}
if (location[i]== 2|location[i]==3){
m = i+2
Inflow_wind= cbind(Inflow_wind,Inflow_matrix[,m])
wind_names = append(wind_names,names[i])
}
}
colnames(Inflow_hydro)<-hydro_names
colnames(Inflow_wind)<-wind_names
Inflow_hydro
source('C:/Users/ab.pedraza1391/SharePoint/AP_documentos - Documentos/Compilacion VAR/Bitbuket_carpeta_compartida_JFP/seriescomplementariedad/test/VAR_main.R')
prueba
minimos =c()
plot(1:(12*forecast_periods),prueba[[1]][[1]][,1],type = 'l')
minimos =min(prueba[[1]][[1]][,1])
for(i in 2:5){
lines(1:(12*forecast_periods),prueba[[1]][[i]][,1],type = 'l')
minimos = append(minimos,min(prueba[[1]][[i]][,1]))
}
forecasted_data=synthetic_simulaton(m_series, names, SETUP_model[[4]],scenarios,forecast_periods,main_data_file[[5]][[2]])
Inflow = forecasted_data[[1]]
Inflow
Inflow = forecasted_data[[1]]
InflowWind = forecasted_data[[2]]
Inflow
InflowWind
library(xlsx)
install.packages(xlsx)
"xlsx"
install.packages("xlsx")
library(xlsx)
getwd()
write.csv(x = Inflow,file = "./Forecast_data/Inflow.csv")
length(forecasted_data[[1]])
ncol(forecasted_data[[1]])
nrow(forecasted_data[[1]])
forecasted_data[[1]]
write.csv(x = Inflow,file = "./Forecast_data/Inflow.csv")
write.csv(x = Inflow,file = "./Forecast_data/InflowWind.csv")
write.xlsx(x = Inflow,file = "./Forecast_data/Inflow.xlsx")
write.csv(x = Inflow,file = "./Forecast_data/InflowWind.csv")
typeof(Inflow)
Inflow = as.data.frame(forecasted_data[[1]])
InflowWind = forecasted_data[[2]]
write.csv(x = Inflow,file = "./Forecast_data/Inflow.csv")
write.csv(x = Inflow,file = "./Forecast_data/InflowWind.csv")
Inflow = as.matrix(forecasted_data[[1]])
InflowWind = forecasted_data[[2]]
write.csv(x = Inflow,file = "./Forecast_data/Inflow.csv")
length(Inflow)
ncol(Inflow)
ncol(Inflow)
Inflow
typeof(Inflow)
Inflow = as.data.frame(forecasted_data[[1]])
typeof(Inflow)
write.csv(x = Inflow,file = "./Forecast_data/Inflow.csv")
Inflow = as.data.frame(forecasted_data[[1]])
write.csv(x = Inflow,file = "./Forecast_data/Inflow.csv")
Inflow = as.data.frame(forecasted_data[[1]])
InflowWind =as.data.frame(forecasted_data[[2]])
write.csv(x = Inflow,file = "./Forecast_data/Inflow.csv")
write.csv(x = Inflow,file = "./Forecast_data/InflowWind.csv")
forecasted_data1=synthetic_simulaton(m_series, names, SETUP_model[[4]],scenarios,forecast_periods,main_data_file[[5]][[2]])
forecasted_data1
source('C:/Users/ab.pedraza1391/SharePoint/AP_documentos - Documentos/Compilacion VAR/Bitbuket_carpeta_compartida_JFP/seriescomplementariedad/test/VAR_main.R')
forecasted_data2
forecast_periods <- 3 #(test time, stablished by user 1 to 20 years)
scenarios <- 6
forecasted_data2=synthetic_simulaton(m_series, names, SETUP_model[[4]],scenarios,forecast_periods,main_data_file[[5]][[2]])
forecasted_data2
install.packages("rJava")
