graphics.off()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
source('./funciones/data_load.R')
source('./funciones/adf_test.R')
source('./funciones/VAR_select_maxP.R')
source('./funciones/error_VARpron.R')
source('./funciones/limites_f.R')
source('./funciones/criterios_fisicos_VARi.R')
source('./funciones/energy_y_H.R')
source('./funciones/energy_y_H_L.R')
source('./funciones/correl_function.R')
source('./funciones/correccion_series.R')
source('./funciones/Normalizar.R')
source('./funciones/DESNormalizar.R')
source('./funciones/m1.R')
source('./funciones/m2.R')
source('./funciones/m3.R')
source('./funciones/Weibull.R')
source('./funciones/beta.R')
source('./funciones/PotWind.R')
source('./funciones/WindEnergy.R')
source("./funciones/funESOLAR.R")
source("./funciones/Synte2.R")
qetwd()
getwd()
Cargar datos
setwd(".") #Cambia el workspace
datafolder = paste('series hidricas sistema completo', sep='/')
getwd()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
##############################################################################################################
# CARGAR FUNCIONES DEL CODIGO
source('./funciones/data_load.R')
source('./funciones/adf_test.R')
source('./funciones/VAR_select_maxP.R')
source('./funciones/error_VARpron.R')
source('./funciones/limites_f.R')
source('./funciones/criterios_fisicos_VARi.R')
source('./funciones/energy_y_H.R')
source('./funciones/correl_function.R')
source('./funciones/correccion_series.R')
source('./funciones/Normalizar.R')
source('./funciones/DESNormalizar.R')
source('./funciones/m1.R')
source('./funciones/m2.R')
source('./funciones/m3.R')
source('./funciones/Weibull.R')
source('./funciones/beta.R')
source('./funciones/PotWind.R')
source('./funciones/WindEnergy.R')
source("./funciones/funESOLAR.R")
source("./funciones/Synte2.R")
source("./funciones/WhiteN.R")
##############################################
# Install tools and libraries
graphics.off()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
# set wd
setwd(".") #first open VAR_main
#setwd("../../test/")
ffolder = '../main/funciones/'
source(paste(ffolder,'Data_import_1.R',sep=''))
source(paste(ffolder,'model_setup.R',sep=''))
######################## Stage 1. data load ####################################
# define folder
datafolder = '../main/series_hidricas_sistema_completo'
# define file
#info_series ='info_var_25.csv' # 13 plantas - problema con p=12
#info_series ='info_var_base.csv' # 8 plantas - problema con p=12
#info_series ='info_var_100.csv' # 27 plantas - problema con p=12
#info_series ='info_var_auct.csv' # evaluaci√≥n de subastas
info_series ='info_var_base.csv' # p=[3-5]
# dala load and assessmet
main_data_file <- Data_import_1(datafolder,info_series,ffolder)
#return(list(m_series,dates,monts_data,m_dates,dataN,info_name,namesS,FP,resource_type,inst_cap))
######################## Stage 1. Model setup #################################
m_series <- main_data_file[[1]]
m_dates <- main_data_file[[4]]
info_codes  <- main_data_file[[6]]
names <- main_data_file[[7]]
#if testing_t <- 1, it uses 80% of the provided period to train the model and the remaining 20% to test it
lag_max =12
testing_t <- 1
d_correl <- 0
seasonality <- 12 #NULL
SETUP_model <- model_setup(m_series,m_dates,info_codes,testing_t,lag_max,seasonality,names,ffolder)
getwd()
setwd('C:/Users/ab.pedraza1391/SharePoint/AP_documentos - Documentos/Compilacion VAR/Bitbuket_carpeta_compartida_JFP/seriescomplementariedad/test')
getwd  ()
graphics.off()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
##############################################################################################################
# CARGAR FUNCIONES DEL CODIGO
source('./funciones/data_load.R')
source('./funciones/adf_test.R')
source('./funciones/VAR_select_maxP.R')
source('./funciones/error_VARpron.R')
source('./funciones/limites_f.R')
source('./funciones/criterios_fisicos_VARi.R')
source('./funciones/energy_y_H.R')
source('./funciones/correl_function.R')
source('./funciones/correccion_series.R')
source('./funciones/Normalizar.R')
source('./funciones/DESNormalizar.R')
source('./funciones/m1.R')
source('./funciones/m2.R')
source('./funciones/m3.R')
source('./funciones/Weibull.R')
source('./funciones/beta.R')
source('./funciones/PotWind.R')
source('./funciones/WindEnergy.R')
source("./funciones/funESOLAR.R")
source("./funciones/Synte2.R")
source("./funciones/WhiteN.R")
###############################################################################################################
# IMPORTAR Y AJUSTAR DATOS.
#--------------------------------------------------------------------------------------------------------------
#Los datos a cargar deben ser incluidos en la carpeta "series meses CSV" en formato "*.csv", siguiendo el
#formato de los archivos iniciales.  Adicionalmente debe incluirse su nombre en el archivo "info_hidro_var.csv".
#El c?digo lee el archivo "info_hidro_var.csv" toma los nombres de los archivos y los busca en la carpeta
#"series meses CSV"
#--------------------------------------------------------------------------------------------------------------
# Cargar datos
setwd(".") #Cambia el workspace
datafolder = paste('series hidricas sistema completo', sep='/')
#datafolder=paste('series hidricas sistema completo',sep = '/')
#datafolder = paste('series hidricas sistema completo', sep='/') #Analisis con mayor cantidad de series
info_series ='info_var_auct.csv'
# Funcion para extaer datos, entrega un list con 3 posiciones, 1. Matriz de informaci?n en formato "double",
# 2.vector de fechas de todos las series utilizadas y 3. matriz de nombres, codigos, obtenida de 'info_hidro_var.csv'
resultado_list<- data_load(datafolder,info_series)
seleccion_list = correccion_series(resultado_list)
# 1. Extraer series
m_series <- seleccion_list[[1]]
m_series_copy = m_series
normalizar=0 #0
if (normalizar == 1) {
salida_norm = Normalizador(m_series)
m_series = salida_norm[[1]]
maximos = salida_norm[[2]]
}
fechas <- seleccion_list[[7]][[1]] #Extrae la informaci?n de fechas
monts_data <-seleccion_list[[7]][[2]] # Cantidad de meses en el horizonte temporal historico
m_dates <- seleccion_list[[7]][[3]] # crea una matriz de fechas para cada serie
# 3. Extrate informaci?n de las series
dataN <- resultado_list[[3]]
info_name <- seleccion_list[[2]]
namesS <- seleccion_list[[3]]
FP <- seleccion_list[[4]]#Factor de produccion
tipo_recurso <- seleccion_list[[5]]
cap_inst = seleccion_list[[6]]
##############################################################################################################
# SERIES DE TIEMPO
# Definicion serie de tiempo "ts_seriesFull" incluye los periodos de entrenamiento y comparacion
# Obtiene el a?o y mes inicial a partir de la informaci?n extaida en la funci?n load_data
month_i =as.numeric(format(m_dates[[1,1]], "%m"))
year_i =as.numeric(format(m_dates[[1,1]], "%Y"))
# Obtiene el a?o y mes final a partir de la informaci?n extaida en la funci?n load_data
month_f = as.numeric(format(m_dates[[length(m_dates[,1]),1]], "%m"))
year_f = as.numeric(format(m_dates[[length(m_dates[,1]),1]], "%Y"))
ts_seriesFull<- ts(m_series,start=c(year_i,month_i),end=c(year_f,month_f),frequency = 12,c("mts","ts","matrix"),names = info_name)
# Serie de tiempo de entrenamiento (2005 a 2012), 96 datos que corresponden a 8 a?os
year_it =year_i
month_it = month_i
ts_seriesFull <- window(ts_seriesFull,c(year_it,month_it),c(year_f,month_f),12)
# El usuario debe seleccionar los a?os de entrenamiento, en este caso el a?o final de entrenamiento es 2012
year_ft = 2015
month_ft = 12
ts_series<-window(ts_seriesFull,c(year_it,month_it),c(year_ft,month_ft))
# Figuras de todas las variables vs viento, visualizaci?n complementariedad
len = length(info_name)
indcV = which(tipo_recurso==2)
indcS = which(tipo_recurso==3)
var_seleccion_automatica = vars::VARselect(ts_series, lag.max = 12, type = c("const"), season =12, exogen = NULL)
#c("const", "trend", "both", "none")
maxP = as.numeric(var_seleccion_automatica$selection[1])
maxP = 4
# Inicializa los arreglos por llenar
VARts_series = list()
myAIC = array(dim=c(maxP,1))
myBIC = array(dim=c(maxP,1))
myHQ = array(dim=c(maxP,1))
VARp_resd = list()
for(j in 1:maxP){
VARts_series[[j]] = vars::VAR(ts_series,p=j,season=12)
myAIC[j,] = var_seleccion_automatica$criteria[,j][1]
#myBIC[j,] = BIC(VARts_series[[j]])
#myHQ[j,] = VARts_series[[j]]$hq
VARp_resd[[j]]= residuals(object = VARts_series[[j]]) #Extrae los residuales por VAR(p)
}
yearsPron =5# Cambiar cuando se quiera aumentar o disminuir la cantidad de a?os
maxP=4
VAR_series_pred = list()
for (j in 1:maxP) {
VAR_series_pred[[j]]<-forecast(VARts_series[[j]], h = (yearsPron*12))
}
# Definicion ts real para comparacion
# 1. Determinar que anos fueron pronosticados
year_ii = year_ft+1
month_ii = 1
year_ff = year_ii+yearsPron-1 # Cambia con la cantidad de anos "yearsPron"
month_ff = 12
# 2. Establecer ts del periodo pronosticado
len=length(info_name)
endRow=length(m_series[,1])
startRow = endRow-((yearsPron*12)-1)
m_comp=m_series[startRow:endRow,1:len] # toma los ultimos valores del vector m_series
# 5. Seleccion la informacion real de los anos de comparacion (2013-2015)
ts_comp <-window(ts_seriesFull,c(year_ii,month_ii),c(year_ff,month_ff))
#dev.off()
# 6. Grafias de comparacion por autorregresivo para todas las series
#6.1. Graficas por resago todas las series
a =length(info_name)
setwd('C:/Users/ab.pedraza1391/SharePoint/AP_documentos - Documentos/Compilacion VAR/Bitbuket_carpeta_compartida_JFP/seriescomplementariedad/main')
graphics.off()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
##############################################################################################################
# CARGAR FUNCIONES DEL CODIGO
source('./funciones/data_load.R')
source('./funciones/adf_test.R')
source('./funciones/VAR_select_maxP.R')
source('./funciones/error_VARpron.R')
source('./funciones/limites_f.R')
source('./funciones/criterios_fisicos_VARi.R')
source('./funciones/energy_y_H.R')
source('./funciones/correl_function.R')
source('./funciones/correccion_series.R')
source('./funciones/Normalizar.R')
source('./funciones/DESNormalizar.R')
source('./funciones/m1.R')
source('./funciones/m2.R')
source('./funciones/m3.R')
source('./funciones/Weibull.R')
source('./funciones/beta.R')
source('./funciones/PotWind.R')
source('./funciones/WindEnergy.R')
source("./funciones/funESOLAR.R")
source("./funciones/Synte2.R")
source("./funciones/WhiteN.R")
###############################################################################################################
# IMPORTAR Y AJUSTAR DATOS.
#--------------------------------------------------------------------------------------------------------------
#Los datos a cargar deben ser incluidos en la carpeta "series meses CSV" en formato "*.csv", siguiendo el
#formato de los archivos iniciales.  Adicionalmente debe incluirse su nombre en el archivo "info_hidro_var.csv".
#El c?digo lee el archivo "info_hidro_var.csv" toma los nombres de los archivos y los busca en la carpeta
#"series meses CSV"
#--------------------------------------------------------------------------------------------------------------
# Cargar datos
setwd(".") #Cambia el workspace
datafolder = paste('series hidricas sistema completo', sep='/')
#datafolder=paste('series hidricas sistema completo',sep = '/')
#datafolder = paste('series hidricas sistema completo', sep='/') #Analisis con mayor cantidad de series
info_series ='info_var_auct.csv'
# Funcion para extaer datos, entrega un list con 3 posiciones, 1. Matriz de informaci?n en formato "double",
# 2.vector de fechas de todos las series utilizadas y 3. matriz de nombres, codigos, obtenida de 'info_hidro_var.csv'
resultado_list<- data_load(datafolder,info_series)
seleccion_list = correccion_series(resultado_list)
# Install tools and libraries
graphics.off()
library(fpp)
library(gdata)
require(tseries)
require(MTS)
require(graphics)
require(Metrics)
require(forecast)
require(corrplot)
# set wd
setwd(".") #first open VAR_main
#setwd("../../test/")
ffolder = '../main/funciones/'
source(paste(ffolder,'Data_import_1.R',sep=''))
source(paste(ffolder,'model_setup.R',sep=''))
######################## Stage 1. data load ####################################
# define folder
datafolder = '../main/series_hidricas_sistema_completo'
# define file
#info_series ='info_var_25.csv' # 13 plantas - problema con p=12
#info_series ='info_var_base.csv' # 8 plantas - problema con p=12
#info_series ='info_var_100.csv' # 27 plantas - problema con p=12
#info_series ='info_var_auct.csv' # evaluaci√≥n de subastas
info_series ='info_var_base.csv' # p=[3-5]
# dala load and assessmet
main_data_file <- Data_import_1(datafolder,info_series,ffolder)
#return(list(m_series,dates,monts_data,m_dates,dataN,info_name,namesS,FP,resource_type,inst_cap))
######################## Stage 1. Model setup #################################
m_series <- main_data_file[[1]]
m_dates <- main_data_file[[4]]
info_codes  <- main_data_file[[6]]
names <- main_data_file[[7]]
#if testing_t <- 1, it uses 80% of the provided period to train the model and the remaining 20% to test it
lag_max =12
testing_t <- 1
d_correl <- 0
seasonality <- 12 #NULL
SETUP_model <- model_setup(m_series,m_dates,info_codes,testing_t,lag_max,seasonality,names,ffolder)
library(fpp)
